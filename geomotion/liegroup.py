#! /usr/bin/python3
import numpy as np
from . import utilityfunctions as ut
from . import manifold as md
from . import group as gp
from . import diffmanifold as tb
from operator import methodcaller
import numdifftools as ndt


class LieGroup(gp.Group, tb.DiffManifold):

    def __init__(self,
                 operation_list,
                 identity_list,
                 inverse_function_list=None,
                 transition_table=((None,),)):
        """A Lie group is both a group and a differentiable manifold, and inherits properties from both.
        Additionally, it has generator fields generated by the derivatives of the group actions"""

        gp.Group.__init__(self,
                          operation_list,
                          identity_list,
                          inverse_function_list,
                          transition_table)

        tb.DiffManifold.__init__(self,
                                 transition_table,
                                 self.n_dim)

    def element(self,
                value,
                initial_chart=0):
        """Instantiate a group element with a specified value"""
        g = LieGroupElement(self,
                            value,
                            initial_chart)
        return g

    def element_set(self,
                    value=None,
                    initial_chart=0,
                    input_format=None):
        g_set = LieGroupElementSet(self,
                                   value,
                                   initial_chart,
                                   input_format)

        return g_set

    def vector(self,
               configuration,
               value,
               initial_chart=0,
               initial_basis=0):
        """Instantiate a Lie grouptangent vector at a specified configuration on the manifold"""
        v = LieGroupTangentVector(self,
                                  configuration,
                                  value,
                                  initial_chart,
                                  initial_basis)
        return v

    def Lie_alg_vector(self,
                       value,
                       initial_chart=0,
                       initial_basis=0):
        """Instantiate a Lie grouptangent vector at a specified configuration on the manifold"""
        v = LieGroupTangentVector(self,
                                  self.identity_element(initial_chart),
                                  value,
                                  initial_chart,
                                  initial_basis)
        return v

    def vector_set(self,
                   configuration,
                   value=None,
                   initial_chart=0,
                   initial_basis=0,
                   input_grid_format=None):
        v = LieGroupTangentVectorSet(self,
                                     configuration,
                                     value,
                                     initial_chart,
                                     initial_basis,
                                     input_grid_format)
        return v

    def L_infinitesimal(self,
                        h_value,
                        g_delta,
                        chart=0):
        """ Function that finds the result of transforming an element at h by an infinitesimal action at g_delta
        away from the identity"""

        # Get the group identity element and add g_delta to it
        g_value = self.identity_list[chart] + g_delta

        # Create group elements from the parameters
        g = self.element(g_value)
        h = self.element(h_value)

        # Compose the group elements
        gh = g * h

        return gh.value

    def R_infinitesimal(self,
                        g_value,
                        h_delta,
                        chart=0):
        """ Function that finds the result of transforming an element at h by an infinitesimal action at g_delta
        away from the identity"""

        # Get the group identity element and add h_delta to it
        h_value = self.identity_list[chart] + h_delta

        # Create group elements from the parameters
        h = self.element(h_value)
        g = self.element(g_value)

        # Compose the group elements
        gh = g * h

        return gh.value

    def generator_field_constructor(self,
                                    f_infinitesimal,
                                    h_delta,
                                    chart=0):
        """Build a vector field from the derivative in the direction of the group action defined by
        f_infinitesimal with h_delta"""

        # Make a function that uses a single value delta to scale the provided h_delta
        def f_delta(g, delta):
            return f_infinitesimal(g, delta * h_delta, chart)

        # Turn f_delta into a ManifoldMap
        f_delta_map = md.ManifoldMap(self, self, f_delta, chart, chart)

        # Take the derivative in the direction of f_delta_map
        d_df = tb.DirectionDerivative(f_delta_map)

        return d_df

    def L_generator(self,
                    h_delta,
                    chart=0):
        return self.generator_field_constructor(self.L_infinitesimal, h_delta, chart)

    def R_generator(self,
                    h_delta,
                    chart=0):
        return self.generator_field_constructor(self.R_infinitesimal, h_delta, chart)


class LieGroupElement(gp.GroupElement):

    def __init__(self,
                 group,
                 value,
                 initial_chart=0):
        gp.GroupElement.__init__(self,
                                 group,
                                 value,
                                 initial_chart)

        self.TL = tb.DifferentialMap(self.L)
        self.TR = tb.DifferentialMap(self.R)

        # Information about how to build a set of these objects
        self.plural = LieGroupElementSet

    def __mul__(self, other):

        if isinstance(other, LieGroupTangentVector):
            return self.TL(other)
        else:
            return gp.GroupElement.__mul__(self, other)

    def __rmul__(self, other):

        if isinstance(other, LieGroupTangentVector):
            return self.TR(other)
        else:
            return gp.GroupElement.__rmul__(self, other)

    def Ad(self, other):
        return self.AD(other)

    def Adinv(self, other):
        return self.AD_inv(other)


class LieGroupTangentVector(tb.TangentVector):

    def __init__(self,
                 manifold: LieGroup,
                 configuration,
                 value,
                 initial_chart=None,
                 initial_basis=0):
        """Tangent vector with extra group properties"""

        tb.TangentVector.__init__(self,
                                  manifold,
                                  configuration,
                                  value,
                                  initial_chart,
                                  initial_basis)

        # Information about how to build a set of these objects
        self.plural = LieGroupTangentVectorSet

    @property
    def group(self):
        return self.manifold

    @group.setter
    def group(self, gp):
        self.manifold = gp


class LieGroupElementSet(gp.GroupElementSet):

    def __init__(self,
                 manifold,
                 value=None,
                 initial_chart=0,
                 input_format=None):

        gp.GroupElementSet.__init__(self,
                                    manifold,
                                    value,
                                    initial_chart,
                                    input_format)

        # Information about what this set should contain
        self.single = LieGroupElement

    def __mul__(self, other):

        if isinstance(other, (LieGroupTangentVector, LieGroupTangentVectorSet)):
            return self.group_set_action(other, '__mul__')
        else:
            return gp.GroupElementSet.__mul__(self, other)

    def __rmul__(self, other):

        if isinstance(other, (LieGroupTangentVector, LieGroupTangentVector)):
            return self.group_set_action(other, '__rmul__')
        else:
            return gp.GroupElementSet.__rmul__(self, other)


class LieGroupTangentVectorSet(tb.TangentVectorSet):

    def __init__(self,
                 group,
                 # Could also be a LieGroupTangentVector, LieGroupTangentVectorSet, or list of LieGroupTangentVectors
                 configuration=None,
                 value=None,
                 initial_chart=0,
                 initial_basis=0,
                 input_grid_format=None):
        tb.TangentVectorSet.__init__(self,
                                     group,
                                     configuration,
                                     value,
                                     initial_chart,
                                     initial_basis,
                                     input_grid_format)

        # Information about what this set should contain
        self.single = LieGroupTangentVector
